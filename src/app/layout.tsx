import "@/styles/globals.css";

import { type Metadata } from "next";
import { Geist } from "next/font/google";

import { TRPCReactProvider } from "@/trpc/react";
import { headers } from "next/headers";
import { auth } from "@/lib/auth";
import { isAdmin } from "@/lib/rbac";
import { SignOutButton } from "./_components/auth-buttons";

export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
});

export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const session = await auth.api.getSession({ headers: await headers() });
  return (
    <html lang="en" className={`${geist.variable}`}>
      <body>
        <TRPCReactProvider>
          <div className="flex items-center justify-between border-b border-white/10 px-6 py-3 text-sm">
            <div className="font-semibold">Code Spectre</div>
            <div className="flex items-center gap-4">
              <a className="hover:underline" href="/dashboard">Dashboard</a>
              <a className="hover:underline" href="/profile">Profile</a>
              {session && isAdmin(session.user.email) ? (
                <a className="hover:underline" href="/admin">Admin</a>
              ) : null}
              {session ? (
                <div className="flex items-center gap-3">
                  {session.user.image ? (
                    // eslint-disable-next-line @next/next/no-img-element
                    <img src={session.user.image} alt="avatar" className="h-6 w-6 rounded-full" />
                  ) : null}
                  <span className="opacity-80">{session.user.email}</span>
                  {isAdmin(session.user.email) ? (
                    <span className="rounded bg-green-600/30 px-2 py-0.5 text-xs text-green-200">admin</span>
                  ) : null}
                  <SignOutButton />
                </div>
              ) : (
                <span className="opacity-60">Not signed in</span>
              )}
            </div>
          </div>
          {children}
        </TRPCReactProvider>
      </body>
    </html>
  );
}
